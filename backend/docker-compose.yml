version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: aurora-postgres
    environment:
      POSTGRES_DB: aurora_db
      POSTGRES_USER: aurora_user
      POSTGRES_PASSWORD: aurora_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - aurora-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: aurora-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aurora-network

  # MongoDB
  mongodb:
    image: mongo:7
    container_name: aurora-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: aurora_admin
      MONGO_INITDB_ROOT_PASSWORD: aurora_password
      MONGO_INITDB_DATABASE: aurora_chat
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - aurora-network

  # API Gateway (Node.js)
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: aurora-api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - MONGO_URI=mongodb://aurora_admin:aurora_password@mongodb:27017/aurora_chat
    depends_on:
      - postgres
      - redis
      - mongodb
    volumes:
      - ./logs:/app/logs
    networks:
      - aurora-network

  # Emotion Service (Python)
  emotion-service:
    build:
      context: .
      dockerfile: Dockerfile.emotion
    container_name: aurora-emotion-service
    ports:
      - "8000:8000"
    environment:
      - PYTHON_ENV=production
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - MONGO_URI=mongodb://aurora_admin:aurora_password@mongodb:27017/aurora_chat
    depends_on:
      - postgres
      - redis
      - mongodb
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    networks:
      - aurora-network

  # Chat Service (Node.js)
  chat-service:
    build:
      context: .
      dockerfile: Dockerfile.chat
    container_name: aurora-chat-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - MONGO_URI=mongodb://aurora_admin:aurora_password@mongodb:27017/aurora_chat
      - EMOTION_SERVICE_URL=http://emotion-service:8000
    depends_on:
      - postgres
      - redis
      - mongodb
      - emotion-service
    volumes:
      - ./logs:/app/logs
    networks:
      - aurora-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: aurora-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - emotion-service
      - chat-service
    networks:
      - aurora-network

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: aurora-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - aurora-network

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: aurora-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - aurora-network

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  prometheus_data:
  grafana_data:

networks:
  aurora-network:
    driver: bridge
